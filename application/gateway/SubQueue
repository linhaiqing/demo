<?php
/**
 * 价格监控
 * User: admin
 * Date: 2018/10/10
 * Time: 16:22
 */

namespace app\gateway;

use app\cfd\CfdLogic;
use app\cfd\cfdMonitor;
use think\Config;
use think\Db;
use think\Cache;

class SubQueue extends QueueBase
{

    /**
     * 睡眠时间，用于数据无效或处理完成后的睡眠
     */
    const QUEUE_USLEEP_TIME = 500000;

    /**
     * 休市状态下的睡眠时间
     */
    const QUEUE_CLOSED_TIME = 1;

    /**
     * 产品
     * @var string
     */
    protected $instrument;

    /**
     * 产品的平台
     * @var string
     */
    protected $platform;

    /**
     * 产品信息
     * @var array
     */
    protected $prodInfo;

    /**
     * Redis 实例
     * @var \Redis
     */
    private $redis;

    /**
     * 牌价 Redis 实例
     * @var \Redis
     */
    private $exchange_redis;

    /**
     * CFD 配置
     * @var array
     */
    private $config;

    /**
     * 操作类
     * @var CfdLogic
     */
    private $cfdLogic;

    /**
     * 监控操作类
     * @var cfdMonitor
     */
    private $cfdMonitor;

    /**
     * 数据库连接
     * @var \think\db\Connection
     */
    private $db;

    /**
     * 是否启用调试模式
     * @var bool
     */
    private $debug;

    public function __construct()
    {

                

    }

    /**
     * 处理函数
     */
    public function handle()
    {
        echo sprintf("begin handle %s - %s at %s \n", $this->platform, $this->instrument, date("Y-m-d H:i:s"));
        try {
            // 建立 Redis 连接
            // $this->initRedis();
            // // 建立 MYSQL 连接
            // $this->db = $this->initDbPConnect();

            // $this->cfdMonitor = new cfdMonitor($this->redis, $this->exchange_redis, $this->db, $this->instrument, $this->contract, $this->platform, [
            //     'redis_pconn'          => true,
            //     'exchange_redis_pconn' => true,
            //     'debug'                => $this->debug,
            // ]);
            // $this->cfdLogic = new CfdLogic($this->instrument, $this->platform, $this->exchange_redis, $this->db);

            while (true) {
                $database_config = Config::get('database');
                unset($database_config['db_admin']);
                unset($database_config['db_mongo']);
                $database_config = array_merge($database_config, ['break_reconnect' => true, 'debug' => false]);
                $this->db = Db::connect($database_config);
                
                // $cache_config = [];
              
                   $cache_config =  Config::get('cache');
                $this->cache = Cache::connect($cache_config, true);
                          
                $this->cache->get('abc');
                // $this->db->name("cfd_product")->where(['instrument' => $this->instrument, 'platform' => $this->platform])->find();

               echo 'string';
                     
                
                // if ($this->__status() != 0) {
                //     // 进程重启或被停止，退出循环
                //     $this->db->close();
                //     $this->redis->close();
                //     break;
                //     die;
                // }

                // try {
                //     if ($this->cfdLogic->isTradeTime() != false) {
                //         $this->initRedis();
                //         $this->initDbPConnect();
                //         // 获取行情
                //         $market_data = $this->cfdMonitor->getKlineTickData($this->instrument, $this->contract);
                //         if ($market_data['bid']['check'] == false || $market_data['ask']['check'] == false) {
                //             usleep(self::QUEUE_USLEEP_TIME);
                //             continue;
                //         }
                //         // $market_data = '{"bid":{"high":"10920.0","low":"10920.0","check":true},"ask":{"high":"10930.0","low":"10927.5","check":true}}';
                //         // $market_data = json_decode($market_data, true);

                //         // 检查是否有成交
                //         $this->cfdMonitor->checkDeal($market_data, $this->cfdLogic->getQueue1Key());
                //         // 检查是否有爆仓
                //         $this->cfdMonitor->checkBao($market_data, $this->cfdLogic->getQueue1Key());
                //         // 检查止损，止盈
                //         $this->cfdMonitor->checkStoplose($market_data, $this->cfdLogic->getQueue1Key());
                //         usleep(self::USLEEP_TIME);
                //     } else {
                //         if ($this->debug) {
                //             echo "{$this->instrument} 处于休市状态：" . PHP_EOL;
                //         }

                //         // 处于休市状态的，可以释放 Redis 连接 
                //         sleep(self::QUEUE_CLOSED_TIME);
                //         //$this->closeRedis();
                //         // 断开连接
                //         //$this->db->close();
                //     }
                // } catch (\RedisException $rd) {
                    
                // }
            }
        } catch (\Exception $e) {
            ExceptionWriter($e);
            if ($this->debug) {
                echo $e->getCode() . PHP_EOL;
                echo $e->getMessage() . PHP_EOL;
                echo $e->getTraceAsString() . PHP_EOL;
            }

            $this->logger->error($e->getMessage() . PHP_EOL . $e->getTraceAsString());
        }
    }

    /**
     * 设置产品
     * @param $instrument
     */
    public function setInstrument($instrument)
    {
        $this->instrument = $instrument;
    }

    /**
     * 设置平台
     * @param $platform
     */
    public function setPlatform($platform)
    {
        $this->platform = $platform;
    }

    /**
     * 检查 Redis 连接
     */
    protected function initRedis()
    {
        if (!$this->redis instanceof \Redis || !$this->redis->ping()) {
            $this->redis = getRedisInstance(true, $this->config['cfdRedisDB']);
        }
        if (!$this->exchange_redis instanceof \Redis || !$this->exchange_redis->ping()) {
            $this->exchange_redis = getRedisInstance(true, $this->config['cfdExchangeRate']['db'], $this->config['cfdExchangeRate']);
        }
    }

    /**
     * 关闭连接
     */
    protected function closeRedis()
    {
        try {
            $this->redis->close();
            $this->exchange_redis->close();
        } catch (\Exception $e) {
            ExceptionWriter($e);
            echo sprintf("%s Redis close...", $this->platform . "-" . $this->instrument) . PHP_EOL;
        }
    }

    /**
     * 创建 MYSQL 长连接
     * @throws \think\Exception
     */
    public function initDbPConnect()
    {
        $database_config = Config::get('database');
        unset($database_config['db_admin']);
        unset($database_config['db_mongo']);
        $database_config = array_merge($database_config, [
            'break_reconnect' => true,
            'debug'           => false,
            'params'          => [\PDO::ATTR_PERSISTENT => true],
        ]);

        return Db::connect($database_config);
    }

    /**
     * 得出运行的毫秒数
     * @param $start
     * @return float
     */
    protected function getSpendTime($start)
    {
        $end = $this->getCurrentTime();
        return $end - $start;
    }

    /**
     * 取当前时间，带毫秒
     * @return float
     */
    protected function getCurrentTime()
    {
        list($msec, $sec) = explode(" ", microtime());
        return (float) $msec + (float) $sec;
    }

    /**
     * 析构法主动释放资源
     */
    function __destruct()
    {
        Db::clear();
    }
}
